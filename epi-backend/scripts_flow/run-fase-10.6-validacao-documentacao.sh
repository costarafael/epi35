#!/bin/bash
# FASE 10.6: VALIDA√á√ÉO DA DOCUMENTA√á√ÉO
# Script baseado no run-all-phases-script-fixed.sh
# Utiliza Claude-Flow com modos especializados e prompts otimizados

set -e  # Exit on error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto do projeto
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado. Execute este script no diret√≥rio raiz do projeto epi-backend."
fi

if [ ! -f "CLAUDE.md" ]; then
    error "CLAUDE.md n√£o encontrado. Certifique-se de estar no projeto correto."
fi

# Verificar se Claude-Flow est√° dispon√≠vel
if [ ! -f "./claude-flow" ]; then
    warning "Claude-Flow n√£o encontrado. Tentando instalar..."
    npx claude-flow@latest init --sparc
    if [ ! -f "./claude-flow" ]; then
        error "Falha ao instalar Claude-Flow. Instale manualmente primeiro."
    fi
fi

# Verificar status do Claude-Flow
log "ü§ñ Verificando status do Claude-Flow..."
./claude-flow status || {
    warning "Claude-Flow n√£o est√° rodando. Iniciando..."
    ./claude-flow start --ui --port 3000 &
    sleep 10
}

# Verificar novamente
./claude-flow status || error "Falha ao iniciar o orquestrador Claude-Flow"

# Atualizar mem√≥ria compartilhada com progresso atual
log "üß† Atualizando mem√≥ria compartilhada..."
./claude-flow memory store "fase_atual" "Executando Fase 10.6 - Valida√ß√£o da Documenta√ß√£o"

# ========================================
# FASE 10.6: VALIDA√á√ÉO DA DOCUMENTA√á√ÉO
# ========================================

log "üîç Fase 10.6: Validando documenta√ß√£o"
# Verificar exist√™ncia dos arquivos de documenta√ß√£o principais
if [ -d "docs" ]; then
    info "‚úÖ Diret√≥rio de documenta√ß√£o encontrado"
    
    # Verificar documenta√ß√£o da API
    if [ -d "docs/api" ]; then
        info "‚úÖ Documenta√ß√£o da API encontrada"
    else
        warning "‚ö†Ô∏è Documenta√ß√£o da API n√£o encontrada"
    fi
    
    # Verificar documenta√ß√£o de arquitetura
    if [ -d "docs/architecture" ]; then
        info "‚úÖ Documenta√ß√£o de arquitetura encontrada"
    else
        warning "‚ö†Ô∏è Documenta√ß√£o de arquitetura n√£o encontrada"
    fi
    
    # Verificar guias operacionais
    if [ -d "docs/operations" ]; then
        info "‚úÖ Guias operacionais encontrados"
    else
        warning "‚ö†Ô∏è Guias operacionais n√£o encontrados"
    fi
else
    warning "‚ö†Ô∏è Diret√≥rio de documenta√ß√£o n√£o encontrado - criando estrutura b√°sica"
    mkdir -p docs/api docs/architecture docs/development docs/operations
fi

# Verificar README.md
if [ -f "README.md" ]; then
    info "‚úÖ README.md encontrado"
else
    warning "‚ö†Ô∏è README.md n√£o encontrado - ser√° criado na pr√≥xima fase"
fi

# Verificar CHANGELOG.md
if [ -f "CHANGELOG.md" ]; then
    info "‚úÖ CHANGELOG.md encontrado"
else
    warning "‚ö†Ô∏è CHANGELOG.md n√£o encontrado - ser√° criado na pr√≥xima fase"
fi

# Verificar metadados do package.json
if [ -f "package.json" ]; then
    # Verificar se tem descri√ß√£o
    if grep -q '"description":' package.json; then
        info "‚úÖ Descri√ß√£o no package.json encontrada"
    else
        warning "‚ö†Ô∏è Descri√ß√£o no package.json n√£o encontrada"
    fi
    
    # Verificar se tem autor
    if grep -q '"author":' package.json; then
        info "‚úÖ Autor no package.json encontrado"
    else
        warning "‚ö†Ô∏è Autor no package.json n√£o encontrado"
    fi
fi

log "üéâ FASE 10.6 CONCLU√çDA!"
exit 0
