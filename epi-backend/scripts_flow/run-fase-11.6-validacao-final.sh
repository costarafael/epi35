#!/bin/bash
# FASE 11.6: VALIDA√á√ÉO FINAL
# Script baseado no run-all-phases-script-fixed.sh
# Utiliza Claude-Flow com modos especializados e prompts otimizados

set -e  # Exit on error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto do projeto
if [ ! -f "package.json" ]; then
    error "package.json n√£o encontrado. Execute este script no diret√≥rio raiz do projeto epi-backend."
fi

if [ ! -f "CLAUDE.md" ]; then
    error "CLAUDE.md n√£o encontrado. Certifique-se de estar no projeto correto."
fi

# Verificar se Claude-Flow est√° dispon√≠vel
if [ ! -f "./claude-flow" ]; then
    warning "Claude-Flow n√£o encontrado. Tentando instalar..."
    npx claude-flow@latest init --sparc
    if [ ! -f "./claude-flow" ]; then
        error "Falha ao instalar Claude-Flow. Instale manualmente primeiro."
    fi
fi

# Verificar status do Claude-Flow
log "ü§ñ Verificando status do Claude-Flow..."
./claude-flow status || {
    warning "Claude-Flow n√£o est√° rodando. Iniciando..."
    ./claude-flow start --ui --port 3000 &
    sleep 10
}

# Verificar novamente
./claude-flow status || error "Falha ao iniciar o orquestrador Claude-Flow"

# Atualizar mem√≥ria compartilhada com progresso atual
log "üß† Atualizando mem√≥ria compartilhada..."
./claude-flow memory store "fase_atual" "Executando Fase 11.6 - Valida√ß√£o Final"

# ========================================
# FASE 11.6: VALIDA√á√ÉO FINAL
# ========================================

log "üîç Fase 11.6: Realizando valida√ß√£o final"
# Verificar build da aplica√ß√£o
npm run build || warning "‚ö†Ô∏è Build tem avisos - verificar antes do deploy final"

# Executar testes
npm test || warning "‚ö†Ô∏è Alguns testes podem falhar - verificar antes do deploy final"

# Verificar se Docker est√° dispon√≠vel e build funciona
if command -v docker &> /dev/null; then
    info "‚úÖ Docker est√° dispon√≠vel"
    # Tentar build para validar Dockerfile
    docker build -t epi-backend:production . > /dev/null 2>&1 && \
        info "‚úÖ Build Docker de produ√ß√£o bem-sucedido" || \
        warning "‚ö†Ô∏è Build Docker falhou - verificar configura√ß√£o"
else
    warning "‚ö†Ô∏è Docker n√£o est√° instalado - instale Docker para validar containers"
fi

# Verificar arquivos de configura√ß√£o de produ√ß√£o
if [ -f ".env.production" ]; then
    info "‚úÖ Arquivo de configura√ß√£o de produ√ß√£o encontrado"
else
    warning "‚ö†Ô∏è Arquivo .env.production n√£o encontrado - criar antes do deploy"
fi

# Verificar documenta√ß√£o
if [ -d "docs" ]; then
    info "‚úÖ Documenta√ß√£o encontrada"
else
    warning "‚ö†Ô∏è Diret√≥rio de documenta√ß√£o n√£o encontrado"
fi

# Verificar scripts de deployment
if [ -d "scripts/deployment" ]; then
    info "‚úÖ Scripts de deployment encontrados"
else
    warning "‚ö†Ô∏è Scripts de deployment n√£o encontrados"
fi

log "üéâ FASE 11.6 CONCLU√çDA!"
exit 0
