#!/bin/bash
# Script de automa√ß√£o completa para desenvolvimento do backend EPI v3.5
# Utiliza Claude-Flow com modos especializados e prompts otimizados

set -e  # Exit on error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Verificar se estamos em uma pasta relativamente vazia
check_files=$(find . -maxdepth 1 -type f -not -name "*.sh" -not -path "./.git/*" | wc -l)
check_dirs=$(find . -maxdepth 1 -type d -not -name "." -not -name ".git" -not -name "docs-building" | wc -l)

if [ "$check_files" -gt 0 ] || [ "$check_dirs" -gt 0 ]; then
    warning "Esta pasta cont√©m outros arquivos al√©m de scripts .sh, .git e docs-building."
    echo "Arquivos encontrados:"
    find . -maxdepth 1 -type f -not -name "*.sh" -not -path "./.git/*"
    find . -maxdepth 1 -type d -not -name "." -not -name ".git" -not -name "docs-building"
    echo ""
    read -p "Deseja continuar mesmo assim? (s/N) " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        exit 1
    fi
fi

log "üöÄ Iniciando configura√ß√£o completa do Backend EPI v3.5 com Claude-Flow"

# Verificar se docs-building existe
if [ -d "docs-building" ]; then
    info "Pasta docs-building detectada. Ser√° preservada para consulta durante o desenvolvimento."
fi

# ========================================
# FASE 0: SETUP INICIAL E CONFIGURA√á√ÉO
# ========================================

log "üì¶ Fase 0: Setup inicial e configura√ß√£o do ambiente"

# 0.1 - Criar package.json
cat > package.json << 'EOF'
{
  "name": "epi-backend",
  "version": "3.5.0",
  "description": "Backend do M√≥dulo de Gest√£o de EPIs v3.5 - Desenvolvido com Claude-Flow",
  "main": "dist/main.js",
  "scripts": {
    "prebuild": "rimraf dist",
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "vitest",
    "test:unit": "vitest run --dir src",
    "test:integration": "vitest run --dir test",
    "test:watch": "vitest watch",
    "test:cov": "vitest run --coverage",
    "test:coverage": "vitest run --coverage",
    "test:e2e": "vitest run --config ./vitest.config.e2e.ts",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev",
    "prisma:deploy": "prisma migrate deploy",
    "prisma:seed": "ts-node prisma/seed.ts",
    "prisma:studio": "prisma studio"
  },
  "dependencies": {
    "@nestjs/common": "^10.0.0",
    "@nestjs/core": "^10.0.0",
    "@nestjs/platform-express": "^10.0.0",
    "@nestjs/config": "^3.2.3",
    "@nestjs/swagger": "^8.1.0",
    "@prisma/client": "^5.15.1",
    "reflect-metadata": "^0.2.0",
    "rxjs": "^7.8.1",
    "swagger-ui-express": "^5.0.1",
    "zod": "^3.23.8",
    "zod-validation-error": "^3.3.0"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.0.0",
    "@nestjs/testing": "^10.0.0",
    "@nestjs/schematics": "^10.0.0",
    "@types/express": "^4.17.17",
    "@types/node": "^20.3.1",
    "@types/supertest": "^6.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitest/coverage-v8": "^1.6.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "prettier": "^3.0.0",
    "prisma": "^5.15.1",
    "rimraf": "^5.0.5",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.4",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3",
    "vitest": "^1.6.0",
    "dotenv": "^16.4.5",
    "dotenv-cli": "^7.4.2"
  }
}
EOF

log "üì¶ Instalando depend√™ncias..."
npm install

# 0.2 - Criar estrutura de diret√≥rios
log "üìÅ Criando estrutura de diret√≥rios..."
mkdir -p src/{domain,application,infrastructure,presentation}
mkdir -p src/domain/{entities,enums,interfaces/repositories}
mkdir -p src/application/{use-cases/{estoque,fichas,queries},dto,services}
mkdir -p src/infrastructure/{database,repositories,config,cache}
mkdir -p src/presentation/{controllers,dto/schemas,filters,interceptors,pipes}
mkdir -p prisma
mkdir -p test/{unit,integration,e2e}
mkdir -p docs

# 0.3 - Criar arquivos de configura√ß√£o
log "‚öôÔ∏è Criando arquivos de configura√ß√£o..."

# .env
cat > .env << 'EOF'
# Database
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/epi_db"

# Application
NODE_ENV=development
PORT=3333

# Features
PERMITIR_ESTOQUE_NEGATIVO=false
PERMITIR_AJUSTES_FORCADOS=true

# Monitoring
LOG_LEVEL=info
ENABLE_METRICS=true
EOF

# .gitignore
cat > .gitignore << 'EOF'
node_modules/
dist/
.env
.env.local
*.log
.DS_Store
coverage/
.vitest-cache
.vscode/*
!.vscode/settings.json
.claude/memory
.claude/logs
.claude/cache
prisma/*.db
prisma/*.db-journal
*.tmp
*.temp
EOF

# tsconfig.json
cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": false,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false,
    "paths": {
      "@/*": ["src/*"],
      "@domain/*": ["src/domain/*"],
      "@application/*": ["src/application/*"],
      "@infrastructure/*": ["src/infrastructure/*"],
      "@presentation/*": ["src/presentation/*"]
    }
  }
}
EOF

# Outros arquivos de config
cat > nest-cli.json << 'EOF'
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}
EOF

# 0.4 - Criar ZodValidationPipe
log "üîß Criando pipe de valida√ß√£o Zod..."
cat > src/presentation/pipes/zod-validation.pipe.ts << 'EOF'
import { PipeTransform, ArgumentMetadata, BadRequestException } from '@nestjs/common';
import { ZodSchema } from 'zod';
import { fromZodError } from 'zod-validation-error';

export class ZodValidationPipe implements PipeTransform {
  constructor(private schema: ZodSchema) {}

  transform(value: unknown, metadata: ArgumentMetadata) {
    try {
      const parsedValue = this.schema.parse(value);
      return parsedValue;
    } catch (error) {
      const validationError = fromZodError(error);
      throw new BadRequestException(validationError.toString());
    }
  }
}
EOF

# 0.5 - Instalar e configurar Claude-Flow
log "ü§ñ Instalando Claude-Flow..."
npx claude-flow@latest init --sparc

# Aguardar cria√ß√£o dos arquivos
sleep 5

# 0.6 - Criar CLAUDE.md customizado
log "üìù Criando arquivo CLAUDE.md..."
cat > CLAUDE.md << 'EOF'
# Projeto: Backend do M√≥dulo de Gest√£o de EPI v3.5

## Contexto do Sistema

Este √© o backend de um sistema empresarial cr√≠tico para gest√£o de Equipamentos de Prote√ß√£o Individual (EPIs). O sistema gerencia:

1. **Estoque de EPIs**: Controle de entrada, sa√≠da, transfer√™ncias e saldos
2. **Fichas de Colaboradores**: Registro de entregas e devolu√ß√µes de EPIs
3. **Rastreabilidade**: Hist√≥rico completo e audit√°vel de todas as movimenta√ß√µes
4. **Relat√≥rios**: Diversos relat√≥rios gerenciais e operacionais

## Princ√≠pios Arquiteturais Fundamentais

### 1. Fonte √önica da Verdade
- A tabela `movimentacoes_estoque` √© o livro-raz√£o imut√°vel.
- O campo `estoque_itens.quantidade` √© um cache de performance.
- Toda opera√ß√£o deve registrar uma movimenta√ß√£o antes de atualizar o saldo.

### 2. Transa√ß√µes At√¥micas (ACID)
- Use transa√ß√µes do Prisma (`prisma.$transaction`) para garantir consist√™ncia.
- Padr√£o: BEGIN ‚Üí INSERT movimenta√ß√£o ‚Üí UPDATE saldo ‚Üí COMMIT.
- Em caso de erro, toda a opera√ß√£o deve ser revertida (rollback).

### 3. Rastreabilidade Individual
- Entregas s√£o rastreadas unitariamente (1 registro em `entrega_itens` = 1 unidade).
- Estoque √© agregado por tipo e status para performance.
- Devolu√ß√µes podem ser parciais.

### 4. Separa√ß√£o de Contextos
- **Notas de Movimenta√ß√£o**: Opera√ß√µes de estoque (entrada, transfer√™ncia, descarte).
- **Entregas/Devolu√ß√µes**: Opera√ß√µes com colaboradores.
- N√£o misturar contextos em um mesmo fluxo.

## Estrutura de C√≥digo Esperada

### Domain Layer (`src/domain`)
```typescript
// Entidades com valida√ß√µes de regras de neg√≥cio
export class EstoqueItem {
  constructor(
    public readonly almoxarifadoId: string,
    public readonly tipoEpiId: string,
    public quantidade: number,
    public status: StatusEstoqueItem
  ) {
    if (quantidade < 0) {
      throw new BusinessError('Quantidade em estoque n√£o pode ser negativa.');
    }
  }
}
```

### Application Layer (`src/application`)
```typescript
// Casos de uso em arquivos separados
export class ConcluirNotaUseCase {
  constructor(
    private readonly notaRepo: INotaRepository,
    private readonly movimentacaoRepo: IMovimentacaoRepository,
    private readonly estoqueRepo: IEstoqueRepository
  ) {}
  
  async execute(notaId: string): Promise<void> {
    // L√≥gica transacional seguindo a especifica√ß√£o UC-ESTOQUE-02
  }
}
```

### Infrastructure Layer (`src/infrastructure`)
```typescript
// Implementa√ß√µes concretas com Prisma
export class PrismaNotaRepository implements INotaRepository {
  constructor(private readonly prisma: PrismaClient) {}
  // Implementa√ß√µes dos m√©todos da interface...
}
```

### Presentation Layer (`src/presentation`)
```typescript
// Controllers NestJS com DTOs e Swagger
@ApiTags('notas-movimentacao')
@Controller('api/notas-movimentacao')
export class NotasController {
  // Endpoints conforme especifica√ß√£o da API
}
```

## Conven√ß√µes de C√≥digo

1.  **Nomenclatura**:
    - Arquivos: `kebab-case` (ex: `concluir-nota.use-case.ts`).
    - Classes: `PascalCase` (ex: `ConcluirNotaUseCase`).
    - Interfaces: `PascalCase` com prefixo "I" (ex: `INotaRepository`).

2.  **Organiza√ß√£o**:
    - Um caso de uso por arquivo.
    - **Testes na pasta `/test`**, seguindo a mesma estrutura de `src/` (ex: `test/application/use-cases/estoque/concluir-nota.use-case.spec.ts`).
    - DTOs na pasta de apresenta√ß√£o (`presentation/dto`).

3.  **Valida√ß√£o**:
    - **Use Zod** para valida√ß√£o de entrada em todos os DTOs. N√£o usar `class-validator`.
    - Valida√ß√µes de regras de neg√≥cio devem residir nas entidades de dom√≠nio.
    - Mensagens de erro devem ser claras e espec√≠ficas.

4.  **Testes**:
    - M√≠nimo de 80% de cobertura de c√≥digo.
    - Testes unit√°rios para casos de uso com reposit√≥rios mockados.
    - Testes de integra√ß√£o para fluxos completos com banco de dados de teste.
    - Testes E2E para validar os contratos da API.

## Configura√ß√µes Importantes

- `PERMITIR_ESTOQUE_NEGATIVO`: Controla se o sistema aceita saldo de estoque negativo.
- `PERMITIR_AJUSTES_FORCADOS`: Habilita ou desabilita os endpoints de ajuste direto de invent√°rio.

## Fluxos Cr√≠ticos a Implementar

1.  **Concluir Nota de Movimenta√ß√£o** (UC-ESTOQUE-02): Validar itens, criar movimenta√ß√µes e atualizar saldos em uma √∫nica transa√ß√£o.
2.  **Processar Entrega** (UC-FICHA-03): Criar registros unit√°rios em `entrega_itens`, validar disponibilidade de estoque e calcular data de devolu√ß√£o.
3.  **Processar Devolu√ß√£o** (UC-FICHA-04): Validar assinatura da entrega original, atualizar status dos itens para 'DEVOLVIDO' e criar estoque em 'AGUARDANDO_INSPECAO'.

## Prioridades de Desenvolvimento (Alinhado com o Script)

1.  **Fase 0-1**: Setup, Configura√ß√£o e Estrutura Base do Projeto.
2.  **Fase 2**: Modelagem do Banco de Dados (Schema, Migrations, Seeds).
3.  **Fase 3**: Camada de Dom√≠nio (Entidades, Enums, Interfaces de Reposit√≥rio).
4.  **Fase 4**: Camada de Infraestrutura (Implementa√ß√µes de Reposit√≥rio com Prisma).
5.  **Fase 5**: Camada de Aplica√ß√£o (Casos de Uso e Relat√≥rios).
6.  **Fase 6**: Camada de Apresenta√ß√£o (API REST com Controllers e DTOs).
7.  **Fase 7**: Testes Abrangentes (Unit√°rios, Integra√ß√£o e E2E).
8.  **Fase 8-11**: Otimiza√ß√µes, DevOps, Documenta√ß√£o e Prepara√ß√£o para Produ√ß√£o.

## Refer√™ncias T√©cnicas

- NestJS Docs: https://docs.nestjs.com
- Prisma Docs: https://www.prisma.io/docs
- Clean Architecture: Separar estritamente dom√≠nio de infraestrutura.
- CQRS: Usar Comandos para modificar estado e Queries para ler dados.
EOF

# 0.7 - Copiar .roomodes consolidado (conte√∫do do artifact roomodes-epi-final)
log "üé≠ Configurando modos de agente especializados..."
# [O conte√∫do do .roomodes ser√° o mesmo do artifact roomodes-epi-final criado anteriormente]

# 0.8 - Criar configura√ß√£o otimizada do Claude-Flow
log "‚öôÔ∏è Criando configura√ß√£o otimizada..."
mkdir -p .claude
cat > .claude/settings.json << 'EOF'
{
  "project": {
    "name": "epi-backend",
    "type": "nestjs-api",
    "description": "Backend do M√≥dulo de Gest√£o de EPIs v3.5"
  },
  "automation": {
    "commandTimeout": 600000,
    "maxOutputSize": 512000,
    "permissions": "*",
    "autoConfirm": true,
    "parallelExecution": true,
    "maxConcurrentAgents": 8
  },
  "memory": {
    "persistenceMode": "aggressive",
    "sharedContext": true,
    "contextWindowSize": "large",
    "checkpointFrequency": "high"
  },
  "sparc": {
    "defaultModes": [
      "architect-epi",
      "database-designer",
      "prisma-expert",
      "nestjs-coder",
      "usecase-developer",
      "transaction-specialist",
      "test-engineer"
    ]
  },
  "swarm": {
    "strategy": "task-parallel",
    "coordinationMode": "memory-first"
  },
  "batchtool": {
    "parallelism": "aggressive",
    "errorHandling": "retry-with-backoff"
  },
  "monitoring": {
    "enableDashboard": true,
    "logLevel": "info"
  }
}
EOF

# 0.9 - Iniciar Claude-Flow
log "üöÄ Iniciando sistema Claude-Flow..."
./claude-flow start --ui --port 3000 &
ORCHESTRATOR_PID=$!

# Aguardar inicializa√ß√£o
sleep 10

# Verificar status
./claude-flow status || error "Falha ao iniciar o orquestrador Claude-Flow"

# 0.10 - Inicializar mem√≥ria compartilhada
log "üß† Inicializando mem√≥ria compartilhada..."
mkdir -p .claude/memory

./claude-flow memory store "project-objective" "Construir o backend para o Sistema de Gest√£o de EPI v3.5, conforme especifica√ß√£o em docs-building. Sistema deve ser robusto, transacional e seguir Clean Architecture."

if [ -d "docs-building" ]; then
    ./claude-flow memory store "docs-reference" "Documenta√ß√£o completa do sistema EPI v3.5 dispon√≠vel em /docs-building para consulta."
fi

log "‚úÖ Setup inicial completo! Iniciando fases de desenvolvimento..."
git add . && git commit -m "feat(epi-backend): [Fase 0] Initial project setup and configuration" || true
git tag -a "phase-0-complete" -m "Phase 0 completed successfully" || true

# ========================================
# FASE 1: ESTRUTURA BASE DO PROJETO
# ========================================

log "üèóÔ∏è Fase 1: Criando estrutura base do projeto NestJS"

./claude-flow sparc run architect-epi "Create the initial NestJS project structure with Clean Architecture layers (domain, application, infrastructure, presentation) following our CLAUDE.md specifications:

1. Create folder structure as defined
2. Configure main.ts with:
   - Swagger setup
   - Global ZodValidationPipe (NOT class-validator)
   - Exception filters
   - CORS configuration

3. Create base modules:
   - AppModule
   - DatabaseModule (Prisma)
   - ConfigModule

IMPORTANT: Use Zod for all validations, NOT class-validator."

sleep 30

# Verificar cria√ß√£o do main.ts
if [ ! -f "src/main.ts" ]; then
    warning "main.ts n√£o foi criado, tentando novamente..."
    ./claude-flow sparc run nestjs-coder "Create src/main.ts with NestJS bootstrap, Swagger configuration, global validation using ZodValidationPipe from src/presentation/pipes/zod-validation.pipe.ts, and proper CORS setup."
fi

git add . && git commit -m "feat(epi-backend): [Fase 1] Initial NestJS project structure with Clean Architecture" || true
git tag -a "phase-1-complete" -m "Phase 1 completed successfully" || true

# ========================================
# FASE 2: MODELAGEM DO BANCO DE DADOS
# ========================================

log "üóÑÔ∏è Fase 2: Modelando banco de dados com Prisma"

./claude-flow swarm "Create the complete Prisma schema for the EPI module with all 13 tables, ENUMs, relations, and constraints as specified in documentation section 3:

TABLES TO CREATE:
- usuarios, unidades_negocio, almoxarifados
- tipos_epi, estoque_itens
- notas_movimentacao, nota_movimentacao_itens
- movimentacoes_estoque
- colaboradores, fichas_epi
- entregas, entrega_itens
- historico_fichas, configuracoes

CRITICAL CONSTRAINTS:
- estoque_itens: UNIQUE(almoxarifado_id, tipo_epi_id, status)
- entrega_itens: CHECK(quantidade_entregue = 1)
- movimentacoes_estoque: Proper estorno constraints
- All foreign key relationships

Include all ENUMs and performance indexes from section 3.4." --strategy development --max-agents 3 --parallel

sleep 60

# Criar migrations
log "üóÑÔ∏è Fase 2.2: Gerando migra√ß√µes do banco de dados"
./claude-flow sparc run migration-expert "Generate Prisma migrations for the complete schema and create all recommended performance indexes."

sleep 30

# Criar seeds
log "üå± Fase 2.3: Criando seeds para desenvolvimento"
./claude-flow sparc run database-designer "Create comprehensive seed data for development including sample usuarios, unidades_negocio, almoxarifados, tipos_epi with realistic data, and initial configuracoes with PERMITIR_ESTOQUE_NEGATIVO=false and PERMITIR_AJUSTES_FORCADOS=true."

sleep 30

npx prisma generate || warning "Falha ao gerar cliente Prisma"

git add . && git commit -m "feat(epi-backend): [Fase 2] Complete database schema with migrations and seeds" || true
git tag -a "phase-2-complete" -m "Phase 2 completed successfully" || true

# ========================================
# FASE 3: CAMADA DE DOM√çNIO
# ========================================

log "üéØ Fase 3: Implementando camada de dom√≠nio"

# Criar entidades em paralelo
batchtool run --parallel 
  "./claude-flow sparc run usecase-developer 'Create domain entities for tipos_epi, estoque_itens, and related value objects with business rules validation in src/domain/entities/'" 
  "./claude-flow sparc run usecase-developer 'Create domain entities for notas_movimentacao, movimentacoes_estoque with immutability constraints in src/domain/entities/'" 
  "./claude-flow sparc run usecase-developer 'Create domain entities for fichas_epi, entregas, entrega_itens with unit tracking logic in src/domain/entities/'" 
  "./claude-flow sparc run usecase-developer 'Create all domain ENUMs matching PostgreSQL enums in src/domain/enums/'"

sleep 45

# Criar interfaces
./claude-flow sparc run architect-epi "Create repository interfaces for all domain entities in src/domain/interfaces/repositories/. Include methods for complex queries, transactions, and specific needs of each use case."

sleep 30

git add . && git commit -m "feat(epi-backend): [Fase 3] Domain layer with entities and repository interfaces" || true
git tag -a "phase-3-complete" -m "Phase 3 completed successfully" || true

# ========================================
# FASE 4: CAMADA DE INFRAESTRUTURA
# ========================================

log "üîß Fase 4: Implementando camada de infraestrutura"

./claude-flow swarm "Implement all repository interfaces using Prisma ORM in src/infrastructure/repositories/:
- NotaRepository
- MovimentacaoRepository
- EstoqueRepository
- FichaRepository
- EntregaRepository
- ConfiguracaoRepository

Each should handle complex queries and maintain ACID properties." --strategy development --max-agents 5 --parallel

sleep 60

# Criar m√≥dulos
./claude-flow sparc run nestjs-coder "Create NestJS infrastructure modules: DatabaseModule for Prisma service with transaction support, repository providers module, and ConfigModule."

sleep 30

git add . && git commit -m "feat(epi-backend): [Fase 4] Infrastructure layer with Prisma repositories" || true
git tag -a "phase-4-complete" -m "Phase 4 completed successfully" || true

# ========================================
# FASE 5: CASOS DE USO
# ========================================

log "üíº Fase 5: Implementando casos de uso"

# Casos de uso de estoque
batchtool run --parallel 
  "./claude-flow sparc run usecase-developer 'Implement UC-ESTOQUE-01: GerenciarNotaRascunho use case with CRUD operations for draft notas_movimentacao in src/application/use-cases/estoque/'" 
  "./claude-flow sparc run transaction-specialist 'Implement UC-ESTOQUE-02: ConcluirNotaMovimentacao with atomic transactions and proper tipo_nota to tipo_movimentacao mapping in src/application/use-cases/estoque/'" 
  "./claude-flow sparc run transaction-specialist 'Implement UC-ESTOQUE-03: CancelarNotaMovimentacao with estorno generation for completed notas in src/application/use-cases/estoque/'" 
  "./claude-flow sparc run usecase-developer 'Implement UC-ESTOQUE-04: RealizarAjusteDireto for immediate inventory adjustments in src/application/use-cases/estoque/'"

sleep 60

# Casos de uso de fichas
./claude-flow swarm "Implement all Ficha use cases in src/application/use-cases/fichas/:
- UC-FICHA-01: CriarTipoEPI
- UC-FICHA-02: CriarFichaEPI (409 on duplicate)
- UC-FICHA-03: CriarEntregaFicha (unit tracking!)
- UC-FICHA-04: ProcessarDevolucao (signature required)
- UC-FICHA-05: CancelarEntrega
- UC-FICHA-06: CancelarDevolucao

CRITICAL: UC-FICHA-03 must create N individual records for tracking!" --strategy development --max-agents 6 --parallel

sleep 60

# Queries e relat√≥rios
./claude-flow sparc run report-developer "Implement all query use cases and reports (R-01 to R-10) in src/application/use-cases/queries/. Pay special attention to R-07 with dynamic DEVOLUCAO_ATRASADA calculation."

sleep 45

git add . && git commit -m "feat(epi-backend): [Fase 5] Complete application layer with all use cases" || true
git tag -a "phase-5-complete" -m "Phase 5 completed successfully" || true

# ========================================
# FASE 6: API REST
# ========================================

log "üåê Fase 6: Criando API REST"

# Controllers de notas
batchtool run --parallel 
  "./claude-flow sparc run nestjs-coder 'Create NotasMovimentacaoController with all endpoints from section 8.1. Use Zod schemas with ZodValidationPipe.'" 
  "./claude-flow sparc run nestjs-coder 'Create EstoqueController with ajustes endpoint and historico endpoint. Use Zod validation.'" 
  "./claude-flow sparc run api-security 'Create Zod schemas for all nota endpoints in src/presentation/dto/schemas/notas/'"

sleep 45

# Controllers de fichas
./claude-flow swarm "Create all Ficha-related controllers:
- TiposEpiController
- FichasEpiController
- EntregasController
- DevolucoesController

Include Swagger documentation and Zod validation." --max-agents 4 --parallel

sleep 60

# Controller de relat√≥rios
./claude-flow sparc run nestjs-coder "Create RelatoriosController with all report endpoints. Include query parameter validation using Zod and pagination support."

sleep 30

git add . && git commit -m "feat(epi-backend): [Fase 6] Complete REST API with all controllers" || true
git tag -a "phase-6-complete" -m "Phase 6 completed successfully" || true

# ========================================
# FASE 7: TESTES
# ========================================

log "üß™ Fase 7: Criando testes abrangentes"

log "üß™ Fase 7.1: Criando testes unit√°rios"
./claude-flow swarm "Create comprehensive unit tests for all use cases with mocked repositories. Test happy paths, error scenarios, edge cases. Ensure 100% coverage for critical use cases. Use Vitest." --strategy testing --max-agents 8 --parallel

sleep 60

log "üß™ Fase 7.2: Criando testes de integra√ß√£o"
./claude-flow sparc run test-engineer "Create integration tests for complete flows: nota lifecycle, entrega/devolu√ß√£o with signature, transfers, concurrent operations. Use test database with transaction rollback."

sleep 45

log "üß™ Fase 7.3: Criando testes End-to-End (E2E)"
./claude-flow sparc run test-engineer "Create end-to-end API tests using Supertest for all endpoints. Test request validation, response formats, error handling, and status codes. Include tests for pagination, filtering, and complex query parameters in reports."

sleep 45

git add . && git commit -m "feat(epi-backend): [Fase 7] Comprehensive test suite (unit, integration, e2e)" || true
git tag -a "phase-7-complete" -m "Phase 7 completed successfully" || true

# ========================================
# FASE 8: OTIMIZA√á√ïES
# ========================================

log "‚ö° Fase 8: Otimizando performance"

./claude-flow sparc run performance-optimizer "Analyze and optimize all database queries, especially for reports and the Kardex. Add missing indexes, optimize N+1 queries with proper includes, and implement query result caching where appropriate. Run EXPLAIN ANALYZE on critical queries."

sleep 30

git add . && git commit -m "perf(epi-backend): [Fase 8] Performance optimizations" || true
git tag -a "phase-8-complete" -m "Phase 8 completed successfully" || true

# ========================================
# FASE 9: DEVOPS
# ========================================

log "üö¢ Fase 9: Configurando DevOps"

./claude-flow sparc run devops-automator "Create multi-stage Dockerfile for production build, docker-compose.yml for local development with PostgreSQL and Redis, and .dockerignore file. Include health check endpoints and graceful shutdown handling."

sleep 30

git add . && git commit -m "feat(epi-backend): [Fase 9] DevOps setup with Docker and CI/CD placeholder" || true
git tag -a "phase-9-complete" -m "Phase 9 completed successfully" || true

# ========================================
# FASE 10: DOCUMENTA√á√ÉO E REVIS√ÉO
# ========================================

log "üìö Fase 10.1: Criando documenta√ß√£o"
./claude-flow swarm "Create comprehensive documentation including: README with setup instructions, API documentation with examples, architecture diagrams, deployment guide, troubleshooting guide, and CHANGELOG. Ensure all business flows are documented with sequence diagrams." --max-agents 3 --parallel

sleep 60

log "üîç Fase 10.2: Revis√£o final do c√≥digo"
./claude-flow sparc run code-reviewer "Perform comprehensive code review checking: adherence to Clean Architecture, proper error handling, transaction consistency, test coverage, performance bottlenecks, security vulnerabilities, and code duplication. Generate report with specific improvements."

sleep 45

git add . && git commit -m "docs(epi-backend): [Fase 10] Complete documentation and final code review" || true
git tag -a "phase-10-complete" -m "Phase 10 completed successfully" || true

# ========================================
# FASE 11: PREPARA√á√ÉO PARA PRODU√á√ÉO
# ========================================

log "üöÄ Fase 11: Preparando para produ√ß√£o"
./claude-flow sparc run devops-automator "Finalize production setup: environment variable validation, secrets management, database migration strategy, backup procedures, monitoring alerts, and rollback procedures. Create production readiness checklist."

sleep 30

git add . && git commit -m "feat(epi-backend): [Fase 11] Production readiness setup" || true
git tag -a "phase-11-complete" -m "Phase 11 completed successfully" || true

# ========================================
# VALIDA√á√ÉO FINAL
# ========================================

log "‚úÖ Fase Final: Valida√ß√£o"

# Executar todos os testes
npm test || warning "Alguns testes falharam"
npm run test:e2e || warning "Alguns testes E2E falharam"

# Build
npm run build || error "Build final falhou. Verifique os erros."

# Parar orquestrador
./claude-flow stop

# ========================================
# RELAT√ìRIO FINAL
# ========================================

log "üìä Desenvolvimento conclu√≠do!"
echo ""
echo "==================================="
echo "RESUMO DO DESENVOLVIMENTO"
echo "==================================="
echo "‚úÖ Estrutura do projeto criada"
echo "‚úÖ Schema do banco, migra√ß√µes e seeds implementados"
echo "‚úÖ Camada de dom√≠nio desenvolvida"
echo "‚úÖ Infraestrutura configurada"
echo "‚úÖ Casos de uso implementados"
echo "‚úÖ API REST completa"
echo "‚úÖ Testes (unit, integration, e2e) criados"
echo "‚úÖ Performance otimizada"
echo "‚úÖ DevOps e Docker configurados"
echo "‚úÖ Documenta√ß√£o e revis√£o completas"
echo "‚úÖ Prepara√ß√£o para produ√ß√£o finalizada"
echo ""
echo "üìÅ Arquivos TypeScript criados:"
find src -type f -name "*.ts" | wc -l
echo ""
echo "üß™ Para executar todos os testes: npm test && npm run test:e2e"
echo "üöÄ Para iniciar servidor: npm run start:dev"
echo "üìö Documenta√ß√£o em: docs/"
echo "üìñ Swagger em: http://localhost:3333/api"
echo ""
echo "üéâ Projeto Backend EPI v3.5 pronto!"
echo "==================================="

exit 0
