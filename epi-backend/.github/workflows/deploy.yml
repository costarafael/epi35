name: Deploy to Render

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # =================================
  # 🧪 Test Job
  # =================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: epi_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Generate Prisma Client
        run: npx prisma generate
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epi_test_db

      - name: 🗄️ Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epi_test_db

      - name: 🏗️ Build application
        run: npm run build

      - name: 🧹 Run linter
        run: npm run lint

      - name: 🧪 Run unit tests
        run: npm run test:unit
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epi_test_db
          REDIS_URL: redis://localhost:6379

      - name: 🔗 Run integration tests
        run: npm run test:integration
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epi_test_db
          REDIS_URL: redis://localhost:6379
          PERMITIR_ESTOQUE_NEGATIVO: false
          PERMITIR_AJUSTES_FORCADOS: false

      # - name: 🎭 Run E2E tests
      #   run: npm run test:e2e
      #   env:
      #     TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epi_test_db
      #     REDIS_URL: redis://localhost:6379

  # =================================
  # 🚀 Deploy Job (only on main branch)
  # =================================
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🎯 Trigger Render Deploy
        if: env.RENDER_DEPLOY_HOOK != ''
        run: |
          curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK }}"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}

      - name: ✅ Deployment Notification
        run: |
          echo "🚀 Deployment triggered successfully!"
          echo "🔗 Check deployment status at: https://dashboard.render.com"
          echo "🌐 Backend URL: https://epi-backend.onrender.com"
          echo "🏥 Health Check: https://epi-backend.onrender.com/health"

  # =================================
  # 📊 Code Quality (Optional)
  # =================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧹 Run linter
        run: npm run lint

      - name: 🏗️ Check build
        run: npm run build

      - name: 📈 Generate test coverage
        run: npm run test:coverage
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epi_test_db

      # Optional: Upload coverage to codecov
      # - name: 📊 Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./coverage/lcov.info