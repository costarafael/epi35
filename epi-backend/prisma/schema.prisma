// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS conforme documentação oficial
// ========================================

// Status para um tipo de EPI no catálogo
enum StatusTipoEpiEnum {
  ATIVO
  DESCONTINUADO

  @@map("status_tipo_epi_enum")
}

// Status de um item no estoque físico
enum StatusEstoqueItemEnum {
  DISPONIVEL
  AGUARDANDO_INSPECAO
  QUARENTENA

  @@map("status_estoque_item_enum")
}

// Tipos de notas de movimentação
enum TipoNotaEnum {
  ENTRADA
  TRANSFERENCIA
  DESCARTE
  ENTRADA_AJUSTE
  SAIDA_AJUSTE

  @@map("tipo_nota_enum")
}

// Status de uma nota de movimentação
enum StatusNotaEnum {
  RASCUNHO
  CONCLUIDA
  CANCELADA

  @@map("status_nota_enum")
}

// Tipos de movimentação no livro-razão
enum TipoMovimentacaoEnum {
  // Movimentações Diretas
  ENTRADA_NOTA
  SAIDA_ENTREGA
  ENTRADA_DEVOLUCAO
  SAIDA_TRANSFERENCIA
  ENTRADA_TRANSFERENCIA
  SAIDA_DESCARTE
  AJUSTE_POSITIVO
  AJUSTE_NEGATIVO
  // Movimentações de Estorno/Cancelamento
  ESTORNO_ENTRADA_NOTA
  ESTORNO_SAIDA_ENTREGA
  ESTORNO_ENTRADA_DEVOLUCAO
  ESTORNO_SAIDA_DESCARTE
  ESTORNO_SAIDA_TRANSFERENCIA
  ESTORNO_ENTRADA_TRANSFERENCIA
  ESTORNO_AJUSTE_POSITIVO
  ESTORNO_AJUSTE_NEGATIVO

  @@map("tipo_movimentacao_enum")
}

// Status da ficha de EPI geral do colaborador
enum StatusFichaEnum {
  ATIVA
  INATIVA

  @@map("status_ficha_enum")
}

// Status do evento de entrega
enum StatusEntregaEnum {
  PENDENTE_ASSINATURA
  ASSINADA
  CANCELADA

  @@map("status_entrega_enum")
}

// Status de um item entregue a um colaborador (unitário)
enum StatusEntregaItemEnum {
  COM_COLABORADOR
  DEVOLVIDO

  @@map("status_entrega_item_enum")
}

// ========================================
// TABELAS conforme documentação oficial
// ========================================

model Usuario {
  id        String   @id @default(uuid())
  nome      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  notasMovimentacao NotaMovimentacao[]
  movimentacoes     MovimentacaoEstoque[]
  entregas          Entrega[]

  @@map("usuarios")
}

model UnidadeNegocio {
  id        String   @id @default(uuid())
  nome      String   @db.VarChar(255)
  codigo    String   @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  almoxarifados Almoxarifado[]
  colaboradores Colaborador[]

  @@map("unidades_negocio")
}

model Almoxarifado {
  id               String   @id @default(uuid())
  unidadeNegocioId String   @map("unidade_negocio_id")
  nome             String   @db.VarChar(255)
  isPrincipal      Boolean  @default(false) @map("is_principal")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  unidadeNegocio         UnidadeNegocio        @relation(fields: [unidadeNegocioId], references: [id])
  estoqueItens           EstoqueItem[]
  notasMovimentacaoOrigem NotaMovimentacao[]   @relation("NotaAlmoxarifadoOrigem")
  notasMovimentacaoDestino NotaMovimentacao[]  @relation("NotaAlmoxarifadoDestino")
  entregas               Entrega[]

  @@map("almoxarifados")
}

model TipoEPI {
  id              String              @id @default(uuid())
  nomeEquipamento String              @map("nome_equipamento") @db.VarChar(255)
  numeroCa        String              @unique @map("numero_ca") @db.VarChar(50)
  descricao       String?             @db.Text
  vidaUtilDias    Int?                @map("vida_util_dias")
  status          StatusTipoEpiEnum   @default(ATIVO)
  createdAt       DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  estoqueItens         EstoqueItem[]
  notaMovimentacaoItens NotaMovimentacaoItem[]

  @@map("tipos_epi")
}

model EstoqueItem {
  id            String                 @id @default(uuid())
  almoxarifadoId String                @map("almoxarifado_id")
  tipoEpiId     String                 @map("tipo_epi_id")
  quantidade    Int                    @default(0)
  custoUnitario Decimal?               @map("custo_unitario") @db.Decimal(12, 2)
  status        StatusEstoqueItemEnum  @default(DISPONIVEL)
  createdAt     DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  almoxarifado     Almoxarifado          @relation(fields: [almoxarifadoId], references: [id])
  tipoEpi          TipoEPI               @relation(fields: [tipoEpiId], references: [id])
  movimentacoes    MovimentacaoEstoque[]
  entregaItens     EntregaItem[]
  notaMovimentacaoItens NotaMovimentacaoItem[]

  @@unique([almoxarifadoId, tipoEpiId, status])
  @@index([almoxarifadoId])
  @@index([tipoEpiId])
  @@map("estoque_itens")
}

model NotaMovimentacao {
  id                    String          @id @default(uuid())
  almoxarifadoId        String          @map("almoxarifado_id")
  almoxarifadoDestinoId String?         @map("almoxarifado_destino_id")
  responsavelId         String          @map("responsavel_id")
  tipoNota              TipoNotaEnum    @map("tipo_nota")
  status                StatusNotaEnum  @default(RASCUNHO)
  numeroDocumento       String?         @map("numero_documento") @db.VarChar(255)
  dataDocumento         DateTime        @default(dbgenerated("CURRENT_DATE")) @map("data_documento") @db.Date
  observacoes           String?         @db.Text
  createdAt             DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  almoxarifadoOrigem  Almoxarifado             @relation("NotaAlmoxarifadoOrigem", fields: [almoxarifadoId], references: [id])
  almoxarifadoDestino Almoxarifado?            @relation("NotaAlmoxarifadoDestino", fields: [almoxarifadoDestinoId], references: [id])
  responsavel         Usuario                  @relation(fields: [responsavelId], references: [id])
  itens               NotaMovimentacaoItem[]
  movimentacoes       MovimentacaoEstoque[]

  @@map("notas_movimentacao")
}

model NotaMovimentacaoItem {
  id                   String @id @default(uuid())
  notaMovimentacaoId   String @map("nota_movimentacao_id")
  quantidade           Int
  estoqueItemId        String? @map("estoque_item_id")
  tipoEpiId            String? @map("tipo_epi_id")
  custoUnitario        Decimal? @map("custo_unitario") @db.Decimal(12, 2)

  // Relacionamentos
  notaMovimentacao NotaMovimentacao @relation(fields: [notaMovimentacaoId], references: [id], onDelete: Cascade)
  estoqueItem      EstoqueItem?     @relation(fields: [estoqueItemId], references: [id])
  tipoEpi          TipoEPI?         @relation(fields: [tipoEpiId], references: [id])

  @@map("nota_movimentacao_itens")
}

model MovimentacaoEstoque {
  id                   String                @id @default(uuid())
  estoqueItemId        String                @map("estoque_item_id")
  responsavelId        String                @map("responsavel_id")
  tipoMovimentacao     TipoMovimentacaoEnum  @map("tipo_movimentacao")
  quantidadeMovida     Int                   @map("quantidade_movida")
  notaMovimentacaoId   String?               @map("nota_movimentacao_id")
  entregaId            String?               @map("entrega_id")
  movimentacaoOrigemId String?               @map("movimentacao_origem_id")
  dataMovimentacao     DateTime              @default(now()) @map("data_movimentacao") @db.Timestamptz(6)

  // Relacionamentos
  estoqueItem         EstoqueItem          @relation(fields: [estoqueItemId], references: [id])
  responsavel         Usuario              @relation(fields: [responsavelId], references: [id])
  notaMovimentacao    NotaMovimentacao?    @relation(fields: [notaMovimentacaoId], references: [id])
  entrega             Entrega?             @relation(fields: [entregaId], references: [id])
  movimentacaoOrigem  MovimentacaoEstoque? @relation("EstornoMovimentacao", fields: [movimentacaoOrigemId], references: [id])
  estornos            MovimentacaoEstoque[] @relation("EstornoMovimentacao")

  @@index([estoqueItemId])
  @@index([tipoMovimentacao])
  @@index([notaMovimentacaoId])
  @@index([entregaId])
  @@map("movimentacoes_estoque")
}

model Colaborador {
  id               String   @id @default(uuid())
  nome             String   @db.VarChar(255)
  cpf              String   @unique @db.VarChar(11)
  matricula        String?  @db.VarChar(50)
  cargo            String?  @db.VarChar(100)
  setor            String?  @db.VarChar(100)
  unidadeNegocioId String   @map("unidade_negocio_id")
  ativo            Boolean  @default(true)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  unidadeNegocio UnidadeNegocio @relation(fields: [unidadeNegocioId], references: [id])
  fichasEPI      FichaEPI[]

  @@map("colaboradores")
}

model FichaEPI {
  id            String          @id @default(uuid())
  colaboradorId String          @unique @map("colaborador_id")
  dataEmissao   DateTime        @default(dbgenerated("CURRENT_DATE")) @map("data_emissao") @db.Date
  status        StatusFichaEnum @default(ATIVA)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  colaborador Colaborador      @relation(fields: [colaboradorId], references: [id])
  entregas    Entrega[]
  historicos  HistoricoFicha[]

  @@map("fichas_epi")
}

model Entrega {
  id               String             @id @default(uuid())
  fichaEpiId       String             @map("ficha_epi_id")
  almoxarifadoId   String             @map("almoxarifado_id")
  responsavelId    String             @map("responsavel_id")
  dataEntrega      DateTime           @default(now()) @map("data_entrega") @db.Timestamptz(6)
  status           StatusEntregaEnum  @default(PENDENTE_ASSINATURA)
  linkAssinatura   String?            @map("link_assinatura") @db.Text
  dataAssinatura   DateTime?          @map("data_assinatura") @db.Timestamptz(6)

  // Relacionamentos
  fichaEpi      FichaEPI              @relation(fields: [fichaEpiId], references: [id])
  almoxarifado  Almoxarifado          @relation(fields: [almoxarifadoId], references: [id])
  responsavel   Usuario               @relation(fields: [responsavelId], references: [id])
  itens         EntregaItem[]
  movimentacoes MovimentacaoEstoque[]

  @@index([fichaEpiId])
  @@index([almoxarifadoId])
  @@map("entregas")
}

model EntregaItem {
  id                   String                @id @default(uuid())
  entregaId            String                @map("entrega_id")
  estoqueItemOrigemId  String                @map("estoque_item_origem_id")
  quantidadeEntregue   Int                   @default(1) @map("quantidade_entregue")
  dataLimiteDevolucao  DateTime?             @map("data_limite_devolucao") @db.Date
  status               StatusEntregaItemEnum @default(COM_COLABORADOR)
  createdAt            DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)

  // Relacionamentos
  entrega     Entrega     @relation(fields: [entregaId], references: [id], onDelete: Cascade)
  estoqueItem EstoqueItem @relation(fields: [estoqueItemOrigemId], references: [id])

  @@index([status, dataLimiteDevolucao])
  @@index([estoqueItemOrigemId])
  @@map("entrega_itens")
}

model HistoricoFicha {
  id           String   @id @default(uuid())
  fichaEpiId   String   @map("ficha_epi_id")
  responsavelId String? @map("responsavel_id")
  acao         String   @db.Text
  detalhes     Json?
  dataAcao     DateTime @default(now()) @map("data_acao") @db.Timestamptz(6)

  // Relacionamentos
  fichaEpi FichaEPI @relation(fields: [fichaEpiId], references: [id])

  @@index([fichaEpiId])
  @@map("historico_fichas")
}

model Configuracao {
  chave     String  @id @db.VarChar(255)
  valor     String  @db.Text
  descricao String? @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("configuracoes")
}