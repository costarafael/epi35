-- Script SQL para executar limpeza total e seed estrutural no Render
-- RESOLVE definitivamente as 11 inconsist√™ncias cr√≠ticas via limpeza absoluta

-- ‚ö†Ô∏è ESTE SCRIPT APAGA TODOS OS DADOS E RECRIA DO ZERO
-- ‚ö†Ô∏è EXECUTAR APENAS AP√ìS CONFIRMA√á√ÉO

BEGIN;

-- ==============================================
-- FASE 1: LIMPEZA ABSOLUTA (RESOLVE INCONSIST√äNCIAS)
-- ==============================================

-- 1.1. Limpar dados transacionais primeiro (ordem importante)
DELETE FROM movimentacao_estoque;
DELETE FROM entrega_itens;
DELETE FROM entregas;
DELETE FROM nota_movimentacao_itens;
DELETE FROM notas_movimentacao;

-- 1.2. üî• CR√çTICO: Limpar estoque (elimina as 11 inconsist√™ncias)
DELETE FROM estoque_itens;

-- 1.3. Limpar fichas e relacionamentos
DELETE FROM fichas_epi;
DELETE FROM colaboradores;
DELETE FROM contratadas;

-- 1.4. Limpar configura√ß√µes de produtos
DELETE FROM tipos_epi;

-- 1.5. Limpar infraestrutura
DELETE FROM almoxarifados;
DELETE FROM unidades_negocio;
DELETE FROM usuarios;

-- 1.6. Limpar configura√ß√µes se existirem
DELETE FROM configuracoes_sistema WHERE TRUE;

-- 1.7. Resetar sequ√™ncias
ALTER SEQUENCE nota_movimentacao_numero_seq RESTART WITH 1;

-- ==============================================
-- VERIFICA√á√ÉO DE LIMPEZA TOTAL
-- ==============================================

-- Verificar se todas as tabelas cr√≠ticas est√£o vazias
DO $$
DECLARE
    tab_movimentacao INTEGER;
    tab_estoque INTEGER;
    tab_entregas INTEGER;
    tab_fichas INTEGER;
    tab_colaboradores INTEGER;
    tab_tipos_epi INTEGER;
BEGIN
    SELECT COUNT(*) INTO tab_movimentacao FROM movimentacao_estoque;
    SELECT COUNT(*) INTO tab_estoque FROM estoque_itens;
    SELECT COUNT(*) INTO tab_entregas FROM entregas;
    SELECT COUNT(*) INTO tab_fichas FROM fichas_epi;
    SELECT COUNT(*) INTO tab_colaboradores FROM colaboradores;
    SELECT COUNT(*) INTO tab_tipos_epi FROM tipos_epi;
    
    IF tab_movimentacao > 0 OR tab_estoque > 0 OR tab_entregas > 0 OR 
       tab_fichas > 0 OR tab_colaboradores > 0 OR tab_tipos_epi > 0 THEN
        RAISE EXCEPTION 'ERRO: Limpeza incompleta. Ainda existem dados: mov=%, est=%, ent=%, fic=%, col=%, epi=%', 
            tab_movimentacao, tab_estoque, tab_entregas, tab_fichas, tab_colaboradores, tab_tipos_epi;
    END IF;
    
    RAISE NOTICE '‚úÖ LIMPEZA TOTAL CONFIRMADA - Todas as 11 inconsist√™ncias eliminadas';
END $$;

-- ==============================================
-- FASE 2: CRIA√á√ÉO DE DADOS ESTRUTURAIS LIMPOS
-- ==============================================

-- 2.1. Criar usu√°rios do sistema
INSERT INTO usuarios (id, nome, email, created_at, updated_at) VALUES
('USR001', 'Administrador Sistema', 'admin@epi.local', NOW(), NOW()),
('USR002', 'Operador Almoxarifado', 'operador@epi.local', NOW(), NOW()),
('USR003', 'Supervisor', 'supervisor@epi.local', NOW(), NOW());

-- 2.2. Criar unidades de neg√≥cio
INSERT INTO unidades_negocio (id, nome, codigo, created_at, updated_at) VALUES
('UNI001', 'Unidade Central', 'CENTRAL', NOW(), NOW()),
('UNI002', 'Filial Norte', 'NORTE', NOW(), NOW());

-- 2.3. Criar almoxarifados
INSERT INTO almoxarifados (id, nome, unidade_negocio_id, is_principal, created_at, updated_at) VALUES
('ALM001', 'Almoxarifado Central', 'UNI001', true, NOW(), NOW()),
('ALM002', 'Almoxarifado Norte', 'UNI002', false, NOW(), NOW());

-- 2.4. Criar contratadas com CNPJs v√°lidos
INSERT INTO contratadas (id, nome, cnpj, ativa, created_at, updated_at) VALUES
('CON001', 'Empresa Alpha Ltda', '11.222.333/0001-81', true, NOW(), NOW()),
('CON002', 'Beta Constru√ß√µes S.A.', '44.555.666/0001-72', true, NOW(), NOW()),
('CON003', 'Gamma Servi√ßos Ltda', '77.888.999/0001-63', true, NOW(), NOW()),
('CON004', 'Delta Engenharia Ltda', '22.333.444/0001-55', true, NOW(), NOW()),
('CON005', 'Epsilon Manuten√ß√£o S.A.', '55.666.777/0001-46', true, NOW(), NOW());

-- 2.5. Criar tipos de EPI
INSERT INTO tipos_epi (id, nome_equipamento, numero_ca, categoria, validade_meses, exige_assinatura_entrega, ativo, created_at, updated_at) VALUES
('EPI001', 'Capacete de Seguran√ßa', '12345', 'PROTECAO_CABECA', 60, true, true, NOW(), NOW()),
('EPI002', '√ìculos de Prote√ß√£o', '23456', 'PROTECAO_OLHOS_ROSTO', 36, false, true, NOW(), NOW()),
('EPI003', 'Luva de Couro', '34567', 'PROTECAO_MAOS_BRACCOS', 12, false, true, NOW(), NOW()),
('EPI004', 'Botina de Seguran√ßa', '45678', 'PROTECAO_PES', 24, true, true, NOW(), NOW()),
('EPI005', 'Protetor Auricular', '56789', 'PROTECAO_OUVIDOS', 6, false, true, NOW(), NOW()),
('EPI006', 'M√°scara Respirat√≥ria', '67890', 'PROTECAO_RESPIRATORIA', 12, true, true, NOW(), NOW()),
('EPI007', 'Cinto de Seguran√ßa', '78901', 'PROTECAO_CABECA', 36, true, true, NOW(), NOW()),
('EPI008', 'Capa de Chuva', '89012', 'PROTECAO_CLIMATICA', 24, false, true, NOW(), NOW());

-- 2.6. Criar colaboradores
INSERT INTO colaboradores (id, nome, cpf, matricula, cargo, contratada_id, unidade_negocio_id, ativo, created_at, updated_at) VALUES
('COL001', 'Jo√£o Silva Santos', '123.456.789-01', 'MAT001', 'Operador de Produ√ß√£o', 'CON001', 'UNI001', true, NOW(), NOW()),
('COL002', 'Maria Oliveira Costa', '234.567.890-12', 'MAT002', 'Supervisora de Seguran√ßa', 'CON001', 'UNI001', true, NOW(), NOW()),
('COL003', 'Pedro Souza Lima', '345.678.901-23', 'MAT003', 'T√©cnico de Manuten√ß√£o', 'CON002', 'UNI001', true, NOW(), NOW()),
('COL004', 'Ana Santos Rocha', '456.789.012-34', 'MAT004', 'Engenheira de Campo', 'CON002', 'UNI002', true, NOW(), NOW()),
('COL005', 'Carlos Pereira Dias', '567.890.123-45', 'MAT005', 'Operador de M√°quinas', 'CON003', 'UNI002', true, NOW(), NOW()),
('COL006', 'Fernanda Lima Cruz', '678.901.234-56', 'MAT006', 'Soldadora', 'CON003', 'UNI001', true, NOW(), NOW()),
('COL007', 'Roberto Alves Moura', '789.012.345-67', 'MAT007', 'Eletricista Industrial', 'CON004', 'UNI002', true, NOW(), NOW()),
('COL008', 'Juliana Rodrigues Teixeira', '890.123.456-78', 'MAT008', 'Inspetora de Qualidade', 'CON004', 'UNI001', true, NOW(), NOW()),
('COL009', 'Marcelo Ferreira Barbosa', '901.234.567-89', 'MAT009', 'Mec√¢nico Industrial', 'CON005', 'UNI002', true, NOW(), NOW()),
('COL010', 'Camila Martins Nascimento', '012.345.678-90', 'MAT010', 'T√©cnica de Seguran√ßa', 'CON005', 'UNI001', true, NOW(), NOW());

-- 2.7. Criar fichas EPI (uma por colaborador - v3.5)
INSERT INTO fichas_epi (id, colaborador_id, status, data_emissao, created_at, updated_at) VALUES
('FICHA001', 'COL001', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA002', 'COL002', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA003', 'COL003', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA004', 'COL004', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA005', 'COL005', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA006', 'COL006', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA007', 'COL007', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA008', 'COL008', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA009', 'COL009', 'ATIVA', NOW(), NOW(), NOW()),
('FICHA010', 'COL010', 'ATIVA', NOW(), NOW(), NOW());

COMMIT;

-- ==============================================
-- VERIFICA√á√ÉO FINAL DE CONSIST√äNCIA
-- ==============================================

-- 1. Contagem dos dados estruturais criados
SELECT 
    'RESUMO DOS DADOS CRIADOS' as categoria,
    'Usu√°rios' as entidade, COUNT(*) as total FROM usuarios
UNION ALL
SELECT '', 'Unidades de Neg√≥cio', COUNT(*) FROM unidades_negocio
UNION ALL
SELECT '', 'Almoxarifados', COUNT(*) FROM almoxarifados
UNION ALL
SELECT '', 'Contratadas', COUNT(*) FROM contratadas
UNION ALL
SELECT '', 'Tipos EPI', COUNT(*) FROM tipos_epi
UNION ALL
SELECT '', 'Colaboradores', COUNT(*) FROM colaboradores
UNION ALL
SELECT '', 'Fichas EPI', COUNT(*) FROM fichas_epi
UNION ALL
SELECT '', 'Itens Estoque', COUNT(*) FROM estoque_itens
UNION ALL
SELECT '', 'Movimenta√ß√µes', COUNT(*) FROM movimentacao_estoque;

-- 2. TESTE DE INCONSIST√äNCIAS (deve retornar 0)
SELECT 
    'üîç TESTE DE INCONSIST√äNCIAS' as resultado,
    COUNT(*) as inconsistencias_encontradas,
    CASE 
        WHEN COUNT(*) = 0 THEN '‚úÖ PERFEITO - Zero inconsist√™ncias garantidas'
        ELSE '‚ùå PROBLEMA - Ainda h√° inconsist√™ncias'
    END as status
FROM (
    SELECT 
        ei.id,
        ei.quantidade as estoque_atual,
        COALESCE(SUM(
            CASE 
                WHEN me.tipo_movimentacao LIKE '%ENTRADA%' OR me.tipo_movimentacao LIKE '%AJUSTE_POSITIVO%' THEN me.quantidade_movida
                WHEN me.tipo_movimentacao LIKE '%SAIDA%' OR me.tipo_movimentacao LIKE '%AJUSTE_NEGATIVO%' THEN -me.quantidade_movida
                ELSE 0
            END
        ), 0) as saldo_kardex
    FROM estoque_itens ei
    LEFT JOIN movimentacao_estoque me ON me.estoque_item_id = ei.id
    GROUP BY ei.id, ei.quantidade
    HAVING ei.quantidade != COALESCE(SUM(
        CASE 
            WHEN me.tipo_movimentacao LIKE '%ENTRADA%' OR me.tipo_movimentacao LIKE '%AJUSTE_POSITIVO%' THEN me.quantidade_movida
            WHEN me.tipo_movimentacao LIKE '%SAIDA%' OR me.tipo_movimentacao LIKE '%AJUSTE_NEGATIVO%' THEN -me.quantidade_movida
            ELSE 0
        END
    ), 0)
) inconsistencias;

-- 3. CONFIRMA√á√ÉO FINAL
SELECT 
    'üéâ LIMPEZA TOTAL E SEED ESTRUTURAL CONCLU√çDOS!' as status,
    'Database limpo, 11 inconsist√™ncias eliminadas, dados consistentes criados' as descricao,
    'Pronto para movimenta√ß√µes via use cases do backend' as proximo_passo;